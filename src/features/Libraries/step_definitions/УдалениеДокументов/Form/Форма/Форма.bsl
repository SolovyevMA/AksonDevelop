
///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,ОписаниеШага,ТипШага,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЕстьДокументыНаДату(Парам01,Парам02)","ЕстьДокументыНаДату","Допустим есть документы ""Покупка"" на дату ""20.10.2017""","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"УдаляемСуществующиеДокументы()","УдаляемСуществующиеДокументы","Тогда удаляем существующие документы","","");

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции



///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуДокументов(ВидДокумента, Дата)
	Год   = Прав(Дата, 4);
	Месяц = Сред(Дата, 4,2);
	День  = Лев(Дата, 2);
	
	Дата = Дата(Год, Месяц, День);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Док.Ссылка КАК Ссылка,
		|	Док.Дата КАК Дата
		|ИЗ
		|	Документ." + ВидДокумента + " КАК Док
		|ГДЕ
		|	Док.Дата МЕЖДУ &ДатаН И &ДатаК";
	
	Запрос.УстановитьПараметр("ДатаН", НачалоДня(Дата));
	Запрос.УстановитьПараметр("ДатаК", КонецДня(Дата));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");	
КонецФункции	

&НаСервере
Функция УдалитьДокументы(МассивДок)
	успешно = Истина;
	Для Каждого Док Из МассивДок Цикл
		ДокОбъект = Док.Ссылка.ПолучитьОбъект();
		
		Попытка
			ДокОбъект.Удалить();
		Исключение
			успешно = Ложь;
			Прервать;
		КонецПопытки;	
	КонецЦикла;	
	Возврат успешно;
КонецФункции	


///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//Допустим есть документы "Покупка" на дату "20.10.2017"
//@ЕстьДокументыНаДату(Парам01,Парам02)
Процедура ЕстьДокументыНаДату(ВидДокумента,Дата) Экспорт
	
	МассивДок = ПолучитьТаблицуДокументов(ВидДокумента, Дата);
	
	Контекст.Вставить("МассивДок", МассивДок);	
	
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	//ВызватьИсключение "Не реализовано.";
КонецПроцедуры

&НаКлиенте
//Тогда удаляем существующие документы
//@УдаляемСуществующиеДокументы()
Процедура УдаляемСуществующиеДокументы() Экспорт
	МассивДок = Контекст.МассивДок;
	
	успешно = УдалитьДокументы(МассивДок);	
	
	Если не успешно Тогда
		ВызватьИсключение "Не реализовано.";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Команда1(Команда)
	ЕстьДокументыНаДату("Покупка","20.10.2017")
КонецПроцедуры
